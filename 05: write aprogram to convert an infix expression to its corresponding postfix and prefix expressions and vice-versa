#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    unsigned capacity;
    char *array;
};

struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    return stack;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

void push(struct Stack* stack, char op) {
    stack->array[++stack->top] = op;
}

char pop(struct Stack* stack) {
    if (!isEmpty(stack))
        return stack->array[stack->top--];
    return '$';
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

int precedence(char op) {
    if (op == '^') return 3;
    else if (op == '*' || op == '/') return 2;
    else if (op == '+' || op == '-') return 1;
    else return -1;
}

void infixToPostfix(char* infix) {
    struct Stack* stack = createStack(strlen(infix));
    int i, k;
    for (i = 0, k = -1; infix[i]; ++i) {
        if (infix[i] >= 'a' && infix[i] <= 'z') {
            printf("%c", infix[i]);
        } else if (infix[i] == '(') {
            push(stack, infix[i]);
        } else if (infix[i] == ')') {
            while (!isEmpty(stack) && stack->array[stack->top] != '(')
                printf("%c", pop(stack));
            if (!isEmpty(stack) && stack->array[stack->top] != '(')
                return;
            else
                pop(stack);
        } else {
            while (!isEmpty(stack) && precedence(infix[i]) <= precedence(stack->array[stack->top]))
                printf("%c", pop(stack));
            push(stack, infix[i]);
        }
    }
    while (!isEmpty(stack))
        printf("%c", pop(stack));
}

void infixToPrefix(char* infix) {
    int length = strlen(infix);
    for (int i = 0; i < length / 2; ++i) {
        char temp = infix[i];
        infix[i] = infix[length - i - 1];
        infix[length - i - 1] = temp;
    }

    for (int i = 0; i < length; ++i) {
        if (infix[i] == '(')
            infix[i] = ')';
        else if (infix[i] == ')')
            infix[i] = '(';
    }

    infixToPostfix(infix);
}

void postfixToInfix(char* postfix) {
    struct Stack* stack = createStack(strlen(postfix));
    int i;
    for (i = 0; postfix[i]; ++i) {
        if (isOperator(postfix[i])) {
            char op1 = pop(stack);
            char op2 = pop(stack);
            char temp[2] = {op2, op1};
            strcat(temp, &postfix[i]);
            push(stack, '(');
            strcat(temp, ")");
            push(stack, temp);
        } else {
            char operand[2] = {postfix[i], '\0'};
            push(stack, operand);
        }
    }
    printf("%s", stack->array);
}

void prefixToInfix(char* prefix) {
    struct Stack* stack = createStack(strlen(prefix));
    int length = strlen(prefix);
    for (int i = length - 1; i >= 0; --i) {
        if (isOperator(prefix[i])) {
            char op1 = pop(stack);
            char op2 = pop(stack);
            char temp[2] = {op1, op2};
            strcat(temp, &prefix[i]);
            push(stack, '(');
            strcat(temp, ")");
            push(stack, temp);
        } else {
            char operand[2] = {prefix[i], '\0'};
            push(stack, operand);
        }
    }
    printf("%s", stack->array);
}

int main() {
    char expression[MAX_SIZE];
    int choice;
    
    printf("Enter the expression: ");
    fgets(expression, MAX_SIZE, stdin);
    
    printf("Choose the conversion:\n");
    printf("1. Infix to Postfix\n");
    printf("2. Infix to Prefix\n");
    printf("3. Postfix to Infix\n");
    printf("4. Prefix to Infix\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);
    
    switch (choice) {
        case 1:
            printf("Postfix expression: ");
            infixToPostfix(expression);
            break;
        case 2:
            printf("Prefix expression: ");
            infixToPrefix(expression);
            break;
        case 3:
            printf("Infix expression: ");
            postfixToInfix(expression);
            break;
        case 4:
            printf("Infix expression: ");
            prefixToInfix(expression);
            break;
        default:
            printf("Invalid choice!");
    }
    
    return 0;
}
