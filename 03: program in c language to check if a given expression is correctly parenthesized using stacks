
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    char items[MAX_SIZE];
};

void initialize(struct Stack *s) {
    s->top = -1;
}

bool isEmpty(struct Stack *s) {
    return (s->top == -1);
}

bool isFull(struct Stack *s) {
    return (s->top == MAX_SIZE - 1);
}

void push(struct Stack *s, char c) {
    if (isFull(s)) {
        printf("Stack Overflow\n");
        exit(EXIT_FAILURE);
    }
    s->items[++s->top] = c;
}

char pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack Underflow\n");
        exit(EXIT_FAILURE);
    }
    return s->items[s->top--];
}

bool isParenthesized(char *expression) {
    struct Stack stack;
    initialize(&stack);
    
    for (int i = 0; expression[i] != '\0'; i++) {
        if (expression[i] == '(') {
            push(&stack, '(');
        } else if (expression[i] == ')') {
            if (isEmpty(&stack)) {
                return false;
            } else {
                pop(&stack);
            }
        }
    }
    
    return isEmpty(&stack);
}

int main() {
    char expression[MAX_SIZE];
    
    printf("Enter an expression: ");
    fgets(expression, MAX_SIZE, stdin);

    for (int i = 0; expression[i] != '\0'; i++) {
        if (expression[i] == '\n') {
            expression[i] = '\0';
            break;
        }
    }

    if (isParenthesized(expression)) {
        printf("The expression is correctly parenthesized.\n");
    } else {
        printf("The expression is not correctly parenthesized.\n");
    }
    
    return 0;
}
